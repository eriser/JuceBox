/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
JuceBoxAudioProcessorEditor::JuceBoxAudioProcessorEditor (JuceBoxAudioProcessor* ownerFilter)
	: AudioProcessorEditor(ownerFilter),
	fileLabel(String::empty, "File..."),
	pathLabel(String::empty),
	midiKeyboard(ownerFilter->keyboardState, MidiKeyboardComponent::horizontalKeyboard)
{
	// This is where our plugin's editor size is set.
	setSize(500, 300);

	addAndMakeVisible(&fileLabel);
	fileLabel.setFont(Font(18.0, Font::bold));
	fileLabel.setColour(Label::textColourId, Colours::grey);
	fileLabel.addClickListener(this);

	addAndMakeVisible(&pathLabel);
	pathLabel.setFont(Font(14.0));

	addAndMakeVisible(&infoLabel);
	infoLabel.setFont(Font(14.0));

	addAndMakeVisible(&midiKeyboard);

	startTimer(200);

	File sampleFile = ownerFilter->getSampleFile();
	if (sampleFile != File::nonexistent)
		updateFile(&sampleFile);
}


JuceBoxAudioProcessorEditor::~JuceBoxAudioProcessorEditor()
{
}


void JuceBoxAudioProcessorEditor::paint (Graphics& g)
{
	g.fillAll(Colours::white);
}


void JuceBoxAudioProcessorEditor::resized()
{
Logger::writeToLog("- resized().");
	enum {
		hMargin = 10,
		vMargin = 10,
		buttonHeight = 25,
		labelHeight = 25,
		keyboardHeight = 70,
		};
	int marginedWidth = getWidth() - 2 * hMargin;
	fileLabel.setBounds(
		hMargin, vMargin, marginedWidth, labelHeight);
	pathLabel.setBounds(
		hMargin, vMargin + buttonHeight, marginedWidth, labelHeight);
	infoLabel.setBounds(
		hMargin, vMargin + buttonHeight + labelHeight,
		marginedWidth, labelHeight);
	midiKeyboard.setBounds(
		hMargin, getHeight() - keyboardHeight - vMargin,
		marginedWidth, keyboardHeight);
}


void JuceBoxAudioProcessorEditor::labelClicked(Label* clickedLabel)
{
	if (clickedLabel == &fileLabel)
		chooseFile();
}


void JuceBoxAudioProcessorEditor::timerCallback()
{
/***
	String infoText =
		"parent: " + String(getParentWidth()) + "x" + String(getParentHeight()) +
		" self: " + String(getWidth()) + "x" + String(getHeight());
	infoLabel.setText(infoText, false);
***/
}


void JuceBoxAudioProcessorEditor::chooseFile()
{
	JuceBoxAudioProcessor* processor = getProcessor();
	FileChooser chooser(
		"Select a sample file...",
		File::nonexistent,
		processor->formatWildcards());
	if (chooser.browseForFileToOpen()) {
		File sampleFile(chooser.getResult());
		setFile(&sampleFile);
		}
}


void JuceBoxAudioProcessorEditor::setFile(File* newFile)
{
	getProcessor()->setSampleFile(newFile);
	updateFile(newFile);
}


void JuceBoxAudioProcessorEditor::updateFile(File* file)
{
	fileLabel.setText(file->getFileName(), false);
	fileLabel.setColour(Label::textColourId, Colours::black);
	pathLabel.setText(file->getParentDirectory().getFullPathName(), false);
}




