/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
JuceBoxAudioProcessorEditor::JuceBoxAudioProcessorEditor (JuceBoxAudioProcessor* ownerFilter)
	: AudioProcessorEditor(ownerFilter),
	button("Load..."),
	pathLabel(String::empty),
	midiKeyboard(ownerFilter->keyboardState, MidiKeyboardComponent::horizontalKeyboard)
{
	// This is where our plugin's editor size is set.
	setSize (500, 300);

	addAndMakeVisible(&button);
	button.addListener(this);

	addAndMakeVisible(&pathLabel);
	pathLabel.setFont(Font(14.0));
	File sampleFile = ownerFilter->getSampleFile();
	pathLabel.setText(sampleFile.getFullPathName(), false);

	addAndMakeVisible(&infoLabel);
	infoLabel.setFont(Font(14.0));

	addAndMakeVisible(&midiKeyboard);

	startTimer(50);
}


JuceBoxAudioProcessorEditor::~JuceBoxAudioProcessorEditor()
{
}


void JuceBoxAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll(Colours::white);
}


void JuceBoxAudioProcessorEditor::resized()
{
	enum {
		hMargin = 10,
		vMargin = 4,
		buttonHeight = 25,
		labelHeight = 25,
		keyboardHeight = 70,
		};
	button.setBounds(hMargin, vMargin, 150, buttonHeight);
	int marginedWidth = getWidth() - 2 * hMargin;
	pathLabel.setBounds(
		hMargin, vMargin + buttonHeight, marginedWidth, labelHeight);
	infoLabel.setBounds(
		hMargin, vMargin + buttonHeight + labelHeight,
		marginedWidth, labelHeight);
	midiKeyboard.setBounds(
		hMargin, getHeight() - keyboardHeight - vMargin,
		marginedWidth, keyboardHeight);
}


void JuceBoxAudioProcessorEditor::buttonClicked(Button* clickedButton)
{
	if (clickedButton == &button) {
		JuceBoxAudioProcessor* processor = getProcessor();
		FileChooser chooser(
			"Select a sample file...",
			File::nonexistent,
			processor->formatWildcards());
		if (chooser.browseForFileToOpen()) {
			File sampleFile(chooser.getResult());
			processor->setSampleFile(&sampleFile);
			pathLabel.setText(sampleFile.getFullPathName(), false);
			}
		}
}


void JuceBoxAudioProcessorEditor::timerCallback()
{
	JuceBoxAudioProcessor* processor = getProcessor();
	if (processor == NULL)
		return;
	infoLabel.setText(processor->infoString(), false);
}




